package ui;

import domain.Warehouse;
import java.util.Scanner;

public class WarehouseUI {

    private final Warehouse warehouse;
    private final Scanner scanner = new Scanner(System.in);

    public WarehouseUI(Warehouse warehouse) {
        this.warehouse = warehouse;
    }

    public void start() {
        boolean exit = false;
        while (!exit) {
            printMenu();
            System.out.print("Escolha uma op√ß√£o: ");
            String option = scanner.nextLine();

            switch (option) {
                case "1":
                    showWarehouseSummary();
                    break;
                case "2":
                    performUnloading();
                    break;
                case "3":
                    performOrderAllocation();
                    break;
                case "4":
                    performPickingPlan();
                    break;
                case "5":
                    performPickPathSequencing();
                    break;
                case "6":
                    processReturns();
                    break;
                case "0":
                    exit = true;
                    System.out.println("Saindo do sistema...");
                    break;
                default:
                    System.out.println("‚ùå Op√ß√£o inv√°lida. Tente novamente.");
            }
        }
    }

    private void printMenu() {
        System.out.println("\n========== Train Station Warehouse UI ==========");
        System.out.println("1Ô∏è‚É£  Mostrar resumo do armaz√©m");
        System.out.println("2Ô∏è‚É£  USEI01 - Descarregar vag√µes (FEFO/FIFO)");
        System.out.println("3Ô∏è‚É£  USEI02 - Aloca√ß√£o de encomendas");
        System.out.println("4Ô∏è‚É£  USEI03 - Plano de picking");
        System.out.println("5Ô∏è‚É£  USEI04 - Sequencia√ß√£o de percursos de picking");
        System.out.println("6Ô∏è‚É£  USEI05 - Processar devolu√ß√µes (quarentena)");
        System.out.println("0Ô∏è‚É£  Sair");
        System.out.println("===============================================");
    }

    private void showWarehouseSummary() {
        System.out.println("\nüì¶ Resumo do armaz√©m:");
        System.out.println(" - Warehouses: " + warehouse.getWarehouses().size());
        System.out.println(" - Bays: " + warehouse.getAllBays().size());
        System.out.println(" - Items: " + warehouse.getItems().size());
        System.out.println(" - Wagons: " + warehouse.getWagons().size());
        System.out.println(" - Orders: " + warehouse.getOrders().size());
        System.out.println(" - Returns: " + warehouse.getReturns().size());
    }

    // --- USEI01 ---
    private void performUnloading() {
        System.out.println("\n[USEI01] Descarregar vag√µes...");
        // Aqui ser√° chamada InventoryService.processUnloading(warehouse);
        System.out.println("‚úÖ (placeholder) Opera√ß√£o simulada com sucesso.");
    }

    // --- USEI02 ---
    private void performOrderAllocation() {
        System.out.println("\n[USEI02] Aloca√ß√£o de encomendas...");
        // OrderService.allocateOrders(warehouse);
        System.out.println("‚úÖ (placeholder) Aloca√ß√£o conclu√≠da com sucesso.");
    }

    // --- USEI03 ---
    private void performPickingPlan() {
        System.out.println("\n[USEI03] Gera√ß√£o do plano de picking...");
        // PickingService.generatePlan(warehouse);
        System.out.println("‚úÖ (placeholder) Plano de picking gerado.");
    }

    // --- USEI04 ---
    private void performPickPathSequencing() {
        System.out.println("\n[USEI04] C√°lculo da sequ√™ncia de picking...");
        // RoutingService.calculatePaths(warehouse);
        System.out.println("‚úÖ (placeholder) Sequ√™ncia de picking calculada.");
    }

    // --- USEI05 ---
    private void processReturns() {
        System.out.println("\n[USEI05] Processamento de devolu√ß√µes...");
        // ReturnsService.process(warehouse);
        System.out.println("‚úÖ (placeholder) Devolu√ß√µes processadas e registadas no log.");
    }
}

